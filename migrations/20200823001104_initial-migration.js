exports.up = function(knex) {
    return knex.raw('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')
    .then(() => {
        return knex
        .schema
        .createTable('Users', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.string('email').unique()
            table.string('hashedPassword')
            table.string('firstName')
            table.string('lastName')
            table.string('description')
            table.string('photo_url')
            table.string('phone')
            table.string('bjcp_id')
            table.enum('bjcp_rank', ["RECOGNIZED","CERTIFIED","NATIONAL","MASTER","GRAND_MASTER","APPRENTICE"])
            table.enum('cicerone_rank', ["SERVER","CICERONE","ADVANCED","MASTER"])
            table.string('brewery')
            table.string('industry')
            table.string('judging_years')
            table.enum('role', ["USER","MODERATOR",'SITE_ADMIN','SITE_SUPERADMIN']).defaultTo("USER")
            table.boolean('verified').defaultTo(false)
            table.string('email_verification_code')
            table.string('invite_code')
            table.string('subscription_id')
        })
        .createTable('ScoresheetFormats', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.uuid('owner').references('id').inTable('Users')
            table.string('description')
            table.jsonb('form_format')
            table.text('form_template')
        })
        .createTable('Competitions', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.string('name')
            table.string('description')
            table.string('email')
            table.string('url')
            table.string('photo_url')
            table.timestamp('entry_deadline')
            table.timestamp('award_ceremony')
            table.uuid('scoresheet_format').references('id').inTable('ScoresheetFormats')
            table.string('sponsor_level')
        })
        .createTable('Entries', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.uuid('competition').references('id').inTable('Competitions')
            table.string('entry_number')
            table.string('judging_number')
            table.string('category')
            table.string('subcategory')
            table.string('style')
            table.string('allergens')
            table.string('info')
            table.string('admin_notes')
        })
        .createTable('Flights', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.uuid('head_judge').references('id').inTable('Users')
            table.string('custom_id')
            table.string('table')
            table.timestamp('session_date').defaultTo(knex.fn.now())
            table.string('session_location')
            table.integer('flight_total')
            table.boolean('flight_submitted')
        })
        .createTable('LinkFlightsEntries', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.uuid('flight').references('id').inTable('Flights')
            table.uuid('entry').references('id').inTable('Entries')
            table.boolean('bos_advance').defaultTo('false')
            table.boolean('round_advance').defaultTo('false')
            table.float('consensus_score')
            table.integer('place')
            table.integer('flight_position')
        })
        .createTable('Scoresheets', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.uuid('user').references('id').inTable('Users')
            table.uuid('entry').references('id').inTable('Entries')
            table.uuid('flight').references('id').inTable('Flights')
            table.uuid('entry_flight').references('id').inTable('LinkFlightsEntries')
            table.enum('category', Array(33).fill(null).map((val,idx)=>idx+1))
            table.string('subcategory', ['A','B','C','D','E','F','G'])
            table.boolean('special_ingredients_check').defaultTo(false)
            table.string('special_ingredients_comment')
            table.boolean('bottle_inspection_check').defaultTo(false)
            table.string('bottle_inspection_comment')
            table.float('aroma_score')
            table.float('appearance_score')
            table.float('flavor_score')
            table.float('mouthfeel_score')
            table.float('overall_score')
            table.boolean('scoresheet_submitted')
            table.jsonb('scoresheet_data')
        })
        .createTable('CompetitionRoles', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.uuid('user').references('id').inTable('Users')
            table.uuid('competition').references('id').inTable('Competitions')
            table.enum('role', ['USER', 'JUDGE', 'HEAD_JUDGE', 'COMPETITION_ADMIN']).defaultTo('USER')
        })
        .createTable('ClubRoles', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.uuid('user').references('id').inTable('Users')
            table.uuid('club').references('id').inTable('Clubs')
            table.enum('role', ['USER', 'CLUB_ADMIN']).defaultTo('USER')
        })
        // This table "prohibits" users in a competition from judging certain categories (i.e. ones they are entered in)
        .createTable('CompetitionUserLimitations', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.uuid('user').references('id').inTable('Users')
            table.uuid('competition').references('id').inTable('Competitions')
            table.enum('category', Array(33).fill(null).map((val,idx)=>idx+1))
        })
    })
};

exports.down = function(knex) {
    return knex.schema
    .dropTable('CompetitionUserLimitations')
    .dropTable('ClubRoles')
    .dropTable('CompetitionRoles')
    .dropTable('Scoresheets')
    .dropTable('LinkFlightsEntries')
    .dropTable('Flights')
    .dropTable('Entries')
    .dropTable('Competitions')
    .dropTable('ScoresheetFormats')
    .dropTable('Users')
};