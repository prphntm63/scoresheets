exports.up = function(knex) {
    return knex.raw('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')
    .then(() => {
        return knex
        .schema
        .createTable('Users', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.string('email').unique()
            table.string('hashedPassword')
            table.string('firstName')
            table.string('lastName')
            table.string('description')
            table.string('photo_url')
            table.string('phone')
            table.string('bjcp_id')
            table.enum('bjcp_rank', ["RECOGNIZED","CERTIFIED","NATIONAL","MASTER","GRAND_MASTER","APPRENTICE"])
            table.enum('cicerone_rank', ["SERVER","CICERONE","ADVANCED","MASTER"])
            table.string('brewery')
            table.string('industry')
            table.string('judging_years')
            table.enum('role', ["USER","CLUB_ADMIN","COMPETITION_ADMIN","MODERATOR","SUPERADMIN"]).defaultTo("USER")
            table.boolean('verified').defaultTo(false)
            table.string('invite_code')
            table.string('subscription_id')
        })
        .createTable('ScoresheetFormats', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.uuid('owner').references('id').inTable('Users')
            table.jsonb('form_format')
            table.text('form_template')
        })
        .createTable('Competitions', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.string('name')
            table.string('description')
            table.string('email')
            table.string('url')
            table.string('photo_url')
            table.timestamp('entry_deadline')
            table.timestamp('award_ceremony')
            table.uuid('scoresheet_format').references('id').inTable('ScoresheetFormats')
            table.string('subscription_id')
        })
        .createTable('Entries', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.uuid('competition').references('id').inTable('Competitions')
            table.string('entry_number')
            table.string('judging_number')
            table.string('category')
            table.string('subcategory')
            table.string('style')
            table.string('allergens')
            table.string('info')
            table.string('admin_notes')
        })
        .createTable('Flights', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.uuid('head_judge').references('id').inTable('Users')
            table.string('custom_id')
            table.string('table')
            table.timestamp('session_date').defaultTo(knex.fn.now())
            table.string('session_location')
            table.integer('flight_total')
            table.boolean('flight_submitted')
        })
        .createTable('LinkFlightsEntries', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.uuid('flight').references('id').inTable('Flights')
            table.uuid('entry').references('id').inTable('Entries')
            table.boolean('bos_advance').defaultTo('false')
            table.boolean('round_advance').defaultTo('false')
            table.float('consensus_score')
            table.integer('place')
            table.integer('flight_position')
        })
        .createTable('Scoresheets', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.uuid('user').references('id').inTable('Users')
            table.uuid('entry').references('id').inTable('Entries')
            table.uuid('flight').references('id').inTable('Flights')
            table.uuid('entry_flight').references('id').inTable('LinkFlightsEntries')
            table.enum('category', Array(33).fill(null).map((val,idx)=>idx+1))
            table.string('subcategory', ['A','B','C','D','E','F','G'])
            table.boolean('special_ingredients_check').defaultTo(false)
            table.string('special_ingredients_comment')
            table.boolean('bottle_inspection_check').defaultTo(false)
            table.string('bottle_inspection_comment')
            table.float('aroma_score')
            table.float('appearance_score')
            table.float('flavor_score')
            table.float('mouthfeel_score')
            table.float('overall_score')
            table.boolean('scoresheet_submitted')

            table.jsonb('scoresheet_data')
            // table.json('appearance')
            // table.json('descriptor')
            // table.json('flavor')
            // table.json('mouthfeel')
            // table.json('overall')

            // table.string('aroma_malt')
            // table.boolean('aroma_malt_inappropriate').defaultTo(false)
            // table.string('aroma_malt_comment')
            // table.string('aroma_hops')
            // table.boolean('aroma_hops_inappropriate').defaultTo(false)
            // table.string('aroma_hops_comment')
            // table.string('aroma_esters')
            // table.boolean('aroma_esters_inappropriate').defaultTo(false)
            // table.string('aroma_esters_comment')
            // table.string('aroma_other')
            // table.boolean('aroma_other_inappropriate').defaultTo(false)
            // table.string('aroma_other_comment')
            
            // table.string('appearance_color')
            // table.boolean('appearance_color_inappropriate').defaultTo(false)
            // table.string('appearance_color_other')
            // table.string('appearance_clarity')
            // table.boolean('appearance_clarity_inappropriate').defaultTo(false)
            // table.string('appearance_clarity_other')
            // table.string('appearance_head')
            // table.boolean('appearance_head_inappropriate').defaultTo(false)
            // table.string('appearance_head_other')
            // table.string('appearance_retention')
            // table.boolean('appearance_retention_inappropriate').defaultTo(false)
            // table.string('appearance_retention_other')
            // table.string('appearance_texture')
            // table.boolean('appearance_texture_inappropriate').defaultTo(false)
            // table.string('appearance_texture_comment')
            // table.string('appearance_other_comment')

            // table.boolean('descriptor_acetaldehyde').defaultTo(false)
            // table.boolean('descriptor_alcoholic').defaultTo(false)
            // table.boolean('descriptor_astringent').defaultTo(false)
            // table.boolean('descriptor_brettanomyces').defaultTo(false)
            // table.boolean('descriptor_diacetyl').defaultTo(false)
            // table.boolean('descriptor_dms').defaultTo(false)
            // table.boolean('descriptor_estery').defaultTo(false)
            // table.boolean('descriptor_grassy').defaultTo(false)
            // table.boolean('descriptor_lightstruck').defaultTo(false)
            // table.boolean('descriptor_metallic').defaultTo(false)
            // table.boolean('descriptor_musty').defaultTo(false)
            // table.boolean('descriptor_oxidized').defaultTo(false)
            // table.boolean('descriptor_phenolic').defaultTo(false)
            // table.boolean('descriptor_smoky').defaultTo(false)
            // table.boolean('descriptor_solvent').defaultTo(false)
            // table.boolean('descriptor_sour').defaultTo(false)
            // table.boolean('descriptor_spicy').defaultTo(false)
            // table.boolean('descriptor_sulfur').defaultTo(false)
            // table.boolean('descriptor_vegetal').defaultTo(false)
            // table.boolean('descriptor_yeasty').defaultTo(false)
            
            // table.string('flavor_malt')
            // table.boolean('flavor_malt_inappropriate').defaultTo(false)
            // table.string('flavor_malt_comment')
            // table.string('flavor_hops')
            // table.boolean('flavor_hops_inappropriate').defaultTo(false)
            // table.string('flavor_hops_comment')
            // table.string('flavor_fermentation')
            // table.boolean('flavor_fermentation_inappropriate').defaultTo(false)
            // table.string('flavor_fermentation_comment')
            // table.string('flavor_balance')
            // table.boolean('flavor_balance_inappropriate').defaultTo(false)
            // table.string('flavor_balance_comment')
            // table.string('flavor_finish_aftertaste')
            // table.boolean('flavor_finish_aftertaste_inappropriate').defaultTo(false)
            // table.string('flavor_finish_aftertaste_comment')
            // table.string('flavor_other_comment')
            
            // table.string('mouthfeel_body')
            // table.boolean('mouthfeel_body_inappropriate').defaultTo(false)
            // table.string('mouthfeel_body_comment')
            // table.string('mouthfeel_carbonation')
            // table.boolean('mouthfeel_carbonation_inappropriate').defaultTo(false)
            // table.string('mouthfeel_carbonation_comment')
            // table.string('mouthfeel_warmth')
            // table.boolean('mouthfeel_warmth_inappropriate').defaultTo(false)
            // table.string('mouthfeel_warmth_comment')
            // table.string('mouthfeel_creaminess')
            // table.boolean('mouthfeel_creaminess_inappropriate').defaultTo(false)
            // table.string('mouthfeel_creaminess_comment')
            // table.string('mouthfeel_astringency')
            // table.boolean('mouthfeel_astringency_inappropriate').defaultTo(false)
            // table.string('mouthfeel_astringency_comment')
            // table.string('mouthfeel_other_comment')
            
            // table.string('overall_class_example')
            // table.string('overall_flawless')
            // table.string('overall_wonderful')
            // table.string('overall_comment')
        })
        .createTable('CompetitionRoles', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.uuid('user').references('id').inTable('Users')
            table.uuid('competition').references('id').inTable('Competitions')
            table.enum('role', ['USER', 'JUDGE', 'HEAD_JUDGE', 'ADMIN', 'SUPERADMIN']).defaultTo('USER')
        })
        .createTable('CompetitionUserLimitations', table => {
            table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).unique()
            table.timestamp('ctime').defaultTo(knex.fn.now())
            table.timestamp('mtime').defaultTo(knex.fn.now())
            table.uuid('user').references('id').inTable('Users')
            table.uuid('competition').references('id').inTable('Competitions')
            table.enum('category', Array(33).fill(null).map((val,idx)=>idx+1))
        })
    })
};

exports.down = function(knex) {
    return knex.schema
    .dropTable('CompetitionUserLimitations')
    .dropTable('CompetitionRoles')
    .dropTable('Scoresheets')
    .dropTable('LinkFlightsEntries')
    .dropTable('Flights')
    .dropTable('Entries')
    .dropTable('Competitions')
    .dropTable('ScoresheetFormats')
    .dropTable('Users')
};